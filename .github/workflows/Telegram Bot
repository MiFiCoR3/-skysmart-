import json
import telebot
import random
import time

# –¢–æ–∫–µ–Ω –±–æ—Ç–∞
TOKEN = "8184732535:AAFs0NLj9jl6NQcrPn_IFrQKCSpQhJUzj-Q"
bot = telebot.TeleBot(TOKEN)
goal_today = 0

backup_data = {}  # –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è



# –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
try:
    with open("user_data.json", "r", encoding="utf-8") as file:
        user_data = json.load(file)
except FileNotFoundError:
    user_data = {}  # –ï—Å–ª–∏ —Ñ–∞–π–ª–∞ –Ω–µ—Ç ‚Äî —Å–æ–∑–¥–∞—ë–º –ø—É—Å—Ç–æ–π —Å–ª–æ–≤–∞—Ä—å


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@bot.message_handler(commands=['start'])
def handle_start_message(message):
    bot.send_message(message.chat.id, "–ü—Ä–∏–≤–µ—Ç, —è —Ç–≤–æ–π –ø–µ—Ä–≤—ã–π –±–æ—Ç, –∑–∞–ø–æ–º–Ω–∏ –º–µ–Ω—è –º–æ–ª–æ–¥—ã–º")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /learn <—á–∏—Å–ª–æ>
@bot.message_handler(commands=['learn'])
def handle_start_learn(message):
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ–≤
        words_number = int(message.text.split()[1])
    except (IndexError, ValueError):
        bot.send_message(message.chat.id, "–ò—Å–ø–æ–ª—å–∑—É–π: /learn <–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ–≤>")
        return

    # –ü–æ–ª—É—á–∞–µ–º —Å–ª–æ–≤–∞—Ä—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_words = user_data.get(str(message.chat.id), {})

    if not user_words:
        bot.send_message(message.chat.id, "–£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç —Å–ª–æ–≤ –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è. –î–æ–±–∞–≤—å —Å–Ω–∞—á–∞–ª–∞ —Å–ª–æ–≤–∞ —á–µ—Ä–µ–∑ /addword.")
        return

    if words_number > len(user_words):
        bot.send_message(message.chat.id, f"–£ —Ç–µ–±—è —Ç–æ–ª—å–∫–æ {len(user_words)} —Å–ª–æ–≤. –£–∫–∞–∂–∏ –Ω–µ –±–æ–ª—å—à–µ.")
        return

    # –ù–∞—á–∏–Ω–∞–µ–º —Å–ø—Ä–∞—à–∏–≤–∞—Ç—å –ø–µ—Ä–µ–≤–æ–¥
    ask_translation(message.chat.id, user_words, words_number)


def ask_translation(chat_id, user_words, words_left):
    if words_left > 0:
        # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω–æ–µ —Å–ª–æ–≤–æ
        word = random.choice(list(user_words.keys()))
        correct_translation = user_words[word]

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ —Å–ª–µ–¥—É—é—â–µ–≥–æ —à–∞–≥–∞
        bot.send_message(chat_id, f"–ù–∞–ø–∏—à–∏ –ø–µ—Ä–µ–≤–æ–¥ —Å–ª–æ–≤–∞: *{word}*", parse_mode='Markdown')

        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Å–ª–µ–¥—É—é—â–∏–π —à–∞–≥ —Å –ø–µ—Ä–µ–¥–∞—á–µ–π –¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ lambda
        bot.register_next_step_handler(
            message=bot.send_message(chat_id, "–û–∂–∏–¥–∞—é –ø–µ—Ä–µ–≤–æ–¥..."),
            callback=check_translation,
            correct_translation=correct_translation,
            user_words=user_words,
            words_left=words_left - 1,
            chat_id=chat_id
        )
    else:
        bot.send_message(chat_id, "‚úÖ –£—Ä–æ–∫ –æ–∫–æ–Ω—á–µ–Ω –û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞!")


def check_translation(message, correct_translation, user_words, words_left, chat_id):
    user_answer = message.text.strip().lower()
    expected = correct_translation.lower()

    if user_answer == expected:
        bot.send_message(chat_id, "üéâ –ö—Ä–∞—Å–∞–≤–∞ –ü—Ä–∞–≤–∏–ª—å–Ω–æ!")
    else:
        bot.send_message(chat_id, f"‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥: *{correct_translation}*", parse_mode='Markdown')

    # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —É—Ä–æ–∫
    ask_translation(chat_id, user_words, words_left)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ /addword <—Å–ª–æ–≤–æ> <–ø–µ—Ä–µ–≤–æ–¥>
@bot.message_handler(commands=['addword'])
def handle_addword(message):
    global user_data, goal_today
    chat_id = str(message.chat.id)  # –ü—Ä–∏–≤–æ–¥–∏–º –∫ —Å—Ç—Ä–æ–∫–µ, —Ç–∞–∫ –∫–∞–∫ JSON –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —Å—Ç—Ä–æ–∫–∏ –∫–∞–∫ –∫–ª—é—á–∏
    user_dict = user_data.get(chat_id, {})

    words = message.text.split(maxsplit=2)[1:]  # –†–∞–∑–¥–µ–ª—è–µ–º —Ç–æ–ª—å–∫–æ –Ω–∞ 3 —á–∞—Å—Ç–∏ –º–∞–∫—Å–∏–º—É–º

    if len(words) == 2:
        word, translation = words[0].strip().lower(), words[1].strip().lower()
        user_dict[word] = translation
        user_data[chat_id] = user_dict  # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª
        with open("user_data.json", "w", encoding="utf-8") as file:
            json.dump(user_data, file, ensure_ascii=False, indent=4)


        bot.send_message(chat_id, f"‚úÖ –°–ª–æ–≤–æ *{word}* –¥–æ–±–∞–≤–ª–µ–Ω–æ: *{translation}*", parse_mode='Markdown')

        goal_today += 1
        bot.send_message(chat_id, f"‚úÖ–°–¥–µ–ª–∞–Ω–æ {goal_today} –∏–∑ {goal_today_score}")

    else:
        bot.send_message(chat_id, "‚ùå –û—à–∏–±–∫–∞. –ò—Å–ø–æ–ª—å–∑—É–π: /addword <—Å–ª–æ–≤–æ> <–ø–µ—Ä–µ–≤–æ–¥>")



# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ /help
@bot.message_handler(commands=['help'])
def handle_help(message):
    help_text = (
        "üìö *–°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥:*\n"
        "/start ‚Äî –Ω–∞—á–∞—Ç—å –æ–±—â–µ–Ω–∏–µ\n"
        "/help ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ\n"
        "/addword <—Å–ª–æ–≤–æ> <–ø–µ—Ä–µ–≤–æ–¥> ‚Äî –¥–æ–±–∞–≤–∏—Ç—å —Å–ª–æ–≤–æ –≤ —Å–ª–æ–≤–∞—Ä—å\n"
        "/learn <—á–∏—Å–ª–æ> ‚Äî –ø–æ–≤—Ç–æ—Ä–∏—Ç—å —É–∫–∞–∑–∞–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ–≤\n\n"
        "/list ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ —Å–ª–æ–≤–∞\n"
        "/clear ‚Äî –æ—á–∏—Å—Ç–∏—Ç—å —Å–ª–æ–≤–∞—Ä—å\n"
        "/goal ‚Äî —Ü–µ–ª—å –Ω–∞ —Å–µ–≥–æ–¥–Ω—è\n"
        "üí¨ –¢–∞–∫–∂–µ —è –æ—Ç–≤–µ—á–∞—é –Ω–∞:\n"
        "‚Ä¢ –ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?\n"
        "‚Ä¢ –†–∞—Å—Å–∫–∞–∂–∏ –æ —Å–µ–±–µ\n"
        "‚Ä¢ –†–∞—Å—Å–∫–∞–∂–∏ —à—É—Ç–∫—É\n"
        "‚Ä¢ –ö–∞–∫ –¥–µ–ª–∞?"
    )
    bot.send_message(message.chat.id, help_text, parse_mode='Markdown')

@bot.message_handler(commands=['list'])
def handle_list(message):
    chat_id = str(message.chat.id)
    user_words = user_data.get(chat_id, {})

    if not user_words:
        bot.send_message(chat_id, "üìö –£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö —Å–ª–æ–≤. –ò—Å–ø–æ–ª—å–∑—É–π /addword, —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –ø–µ—Ä–≤–æ–µ —Å–ª–æ–≤–æ!")
        return

    # –§–æ—Ä–º–∏—Ä—É–µ–º –∫—Ä–∞—Å–∏–≤—ã–π —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤
    words_list = "\n".join([f"‚Ä¢ *{word}* ‚Äî {translation}" for word, translation in user_words.items()])
    bot.send_message(chat_id, f"–í–æ—Ç —Ç–≤–æ–∏ —Å–ª–æ–≤–∞:\n\n{words_list}", parse_mode='Markdown')

@bot.message_handler(commands=['clear'])
def handle_clear(message):
    chat_id = str(message.chat.id)
    user_words = user_data.get(chat_id, {})
    clear_answer = (message.text)

    if not user_words:
        bot.send_message(chat_id, "üìö –£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö —Å–ª–æ–≤. –ò—Å–ø–æ–ª—å–∑—É–π /addword, —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –ø–µ—Ä–≤–æ–µ —Å–ª–æ–≤–æ!")

        return
    bot.send_message(chat_id, "–¢—ã —Ç–æ—á–Ω–æ —Ö–æ—á–µ—à—å —É–¥–∞–ª–∏—Ç—å —Å–ª–æ–≤–∞—Ä—å? –¥–∞/–Ω–µ—Ç")



    if chat_id in user_data:
        backup_datachat_id = user_datachat_id.copy()  # –ö–æ–ø–∏—Ä—É–µ–º —Å–ª–æ–≤–∞—Ä—å


    if clear_answer == "–¥–∞":
        user_data.clear()
        bot.send_message(chat_id, "üóë –°–ª–æ–≤–∞—Ä—å –æ—á–∏—â–µ–Ω.\n" "–ù–∞–ø–∏—à–∏ *¬´–≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å¬ª*, —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å –≤—Å—ë –æ–±—Ä–∞—Ç–Ω–æ. –£ —Ç–µ–±—è –µ—Å—Ç—å 5 –º–∏–Ω—É—Ç")
    elif clear_answer == "–Ω–µ—Ç":
        bot.send_message(chat_id, "–°–ª–æ–≤–∞—Ä—å –æ—Å—Ç–∞–ª—Å—è —Ç–∞–∫–∏–º –∂–µ")
    else:
        bot.send_message(chat_id, "–¢—ã –Ω–∞–ø–∏—Å–∞–ª –Ω–µ –¥–∞ –∏–ª–∏ –Ω–µ—Ç‚ùå. –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞")
        handle_clear()



    handle_list()


@bot.message_handler(func=lambda m: m.text.strip().lower() == "–≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å")
def restore_data(message):
    chat_id = str(message.chat.id)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ä–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è –∏ –Ω–µ –∏—Å—Ç–µ–∫–ª–æ –ª–∏ –≤—Ä–µ–º—è
    if chat_id in backup_data:
        user_datachat_id = backup_datachat_id.copy()
    del backup_datachat_id  # –£–¥–∞–ª—è–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é –ø–æ—Å–ª–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
    bot.send_message(chat_id, "‚úÖ –°–ª–æ–≤–∞—Ä—å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")





goal_today = 0


@bot.message_handler(commands=['goal'])
def handle_goal(message):
    chat_id = str(message.chat.id)
    bot.send_message(chat_id, "–°–∫–æ–ª—å–∫–æ —Å–ª–æ–≤ —Ö–æ—á–µ—à—å —Å–µ–≥–æ–¥–Ω—è –≤—ã—É—á–∏—Ç—å? –í—ã–±–∏—Ä–∞–π –æ—Ç 1 –¥–æ 10")

    global goal_today  # ‚Üê –†–∞–∑—Ä–µ—à–∞–µ–º –∏–∑–º–µ–Ω—è—Ç—å

    try:
        # –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞—ë–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é
        goal_today_score = int(message.text.strip())

        for goal_today in range(goal_today_score) and handle_addword():
            goal_today += 1
            bot.send_message(message.chat.id, f"‚úÖ +1. –ü—Ä–æ–≥—Ä–µ—Å—Å: {goal_today}/5")

        else:
            bot.send_message(message.chat.id, "–ù–∞–ø–∏—à–∏—Ç–µ 1, —á—Ç–æ–±—ã –æ—Ç–º–µ—Ç–∏—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ.")

    except ValueError:
        bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")





# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
@bot.message_handler(func=lambda message: True)
def handle_all_messages(message):
    text = message.text.lower()
    chat_id = message.chat.id

    if text == "–∫–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?":
        bot.send_message(chat_id, "–ú–µ–Ω—è –∑–æ–≤—É—Ç –ë–æ—Ç-—É—á–µ–Ω–∏–∫ –ê —Ç–µ–±—è –∫–∞–∫?")
    elif text == "—Ä–∞—Å—Å–∫–∞–∂–∏ –æ —Å–µ–±–µ":
        bot.send_message(chat_id, "–Ø ‚Äî —Ç–≤–æ–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –±–æ—Ç –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è —Å–ª–æ–≤. –î–æ–±–∞–≤–ª—è–π —Å–ª–æ–≤–∞ —á–µ—Ä–µ–∑ /addword –∏ –ø–æ–≤—Ç–æ—Ä—è–π —Å /learn!")
    elif text == "—Ä–∞—Å—Å–∫–∞–∂–∏ —à—É—Ç–∫—É":
        bot.send_message(chat_id, "–í–ª—é–±–∏–ª–∞—Å—å –∫–∞–∫-—Ç–æ —á–µ—Ä–µ–ø–∞—Ö–∞ –≤ –∂–∏—Ä–∞—Ñ–∞‚Ä¶ –ê –æ–Ω –µ—ë –¥–∞–∂–µ –Ω–µ –∑–∞–º–µ—Ç–∏–ª ‚Äî –≥–æ–ª–æ–≤–∞ —É –Ω–µ–≥–æ –≤—ã—Å–æ–∫–æ.")
    elif text == "–∫–∞–∫ –¥–µ–ª–∞?":
        bot.send_message(chat_id, "–í—Å—ë –∫—Ä—É—Ç–æ –£—á—É —Å–ª–æ–≤–∞ –∏ –ø–æ–º–æ–≥–∞—é —Ç–µ–±–µ üòé")
    else:
        # –ï—Å–ª–∏ –∫–æ–º–∞–Ω–¥–∞ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞
        bot.send_message(chat_id, "–ù–µ –ø–æ–Ω—è–ª. –ù–∞–ø–∏—à–∏ /help, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å, —á—Ç–æ —è —É–º–µ—é.")



# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == "__main__":
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    bot.polling(none_stop=True)
